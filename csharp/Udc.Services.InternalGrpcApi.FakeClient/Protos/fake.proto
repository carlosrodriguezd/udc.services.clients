syntax = "proto3";

package udc.services.protos.fake;

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

/*
The Fake Service API allows you to create, get, update, upsert, and delete individual not-real students. It helps developers test API connection and flow meanwhile their real service API is not ready or not fully available.

Newest proto files, which define the contract of gRPC services and messages, are available to be downloaded from our repository:
<ul>
  <li><a href="https://github.com/carlosrodriguezd/udc.services/blob/main/src/Infraestructure/Udc.Services.Protos/fake.proto" target="_blank">fake.proto</a></li>
  <li><a href="https://github.com/carlosrodriguezd/udc.services/blob/main/src/Infraestructure/Udc.Services.Protos/core.proto" target="_blank">core.proto</a></li>
</ul>
 */
service FakeService {
  // Returns all the fake base centers. _Unsecured endpoint_
  rpc GetAllFakeBaseCenters (google.protobuf.Empty) returns (FakeBaseCenters);
  // Returns all the fake base students.
  rpc GetAllFakeStudents (google.protobuf.Empty) returns (FakeStudents);
  // Retrieves the details of an existing fake student by its identifier document and ID type document.
  rpc GetFakeStudentByIDDocument (GetFakeStudentByIDDocumentRequest) returns (FakeStudent);
  // Retrieves the details of an existing fake student by its internal identifier.
  rpc GetFakeStudentByID (GetFakeStudentByIDRequest) returns (FakeStudent);
  // Creates a new fake student. Returns its auto-generated internal identifier if the create succeeded.
  rpc CreateFakeStudent (FakeStudent) returns (CreateFakeStudentResponse);
  // Deletes the exisiting fake student specified by its internal identifier.
  rpc DeleteFakeStudentByID (DeleteFakeStudentByIDRequest) returns (google.protobuf.Empty);
  // Updates the exisiting fake student specified by its internal identifier. All fake student's properties will be changed, setting the passed values.
  rpc UpdateFakeStudent (FakeStudent) returns (google.protobuf.Empty);
  // Creates a new fake student or updates the exisiting fake student based on the value of its internal identifier. Returns its auto-generated internal identifier if the upsert succeeded.
  rpc UpsertFakeStudent (FakeStudent) returns (UpsertFakeStudentResponse);
}

// Type of ID document that can be used to prove a person's identity.
enum FakeIDDocumentType {
  FAKE_ID_DOCUMENT_TYPE_UNSPECIFIED = 0; // Unspecified or unknown.
  FAKE_ID_DOCUMENT_TYPE_NIF = 1; // Spanish National ID (DNI).
  FAKE_ID_DOCUMENT_TYPE_NIE = 2; // Foreigner Identification Number in Spain.
  FAKE_ID_DOCUMENT_TYPE_PASSPORT = 3; // Passport.
  FAKE_ID_DOCUMENT_TYPE_EU = 4; // ID document in the European Union.
  FAKE_ID_DOCUMENT_TYPE_OTHER = 5; // Any another.
}

// Fake Base Center describe, with basic properties, the fake faculties, schools and other cCenterCodeRegularExpressionenters where studies are taught.
// [Example]{
//   "fake_base_entity": {},
//   "code": "614",
//   "name": "Faculty of Computer Science"
//}
message FakeBaseCenter {
  FakeBaseEntity fake_base_entity = 1;
  string code = 2; /* _Required_. _Unique_. Validation: _^[a-zA-Z0-9]{3}$_. <p>The code of the fake center.</p> */
  string name = 3; /* _Required_. Validation: _^[a-zA-Z·ÈÌÛ˙¡…Õ”⁄0-9\s]{1,150}$_. <p>The name of the fake center.</p> */
}

// Any entity has an internal id
message FakeBaseEntity {
  google.protobuf.StringValue id = 1; /* _Optional_. Default: _none_. Validation: _^[a-zA-Z0-9.-]{1,100}$_. <p>Unique internal identifier for the entity.</p> */
}

// Fake Base Person describe, with basic properties, the fake students, teachers, administrative and services staff workers and other non-University members.
// [Example]{
//   "fake_base_entity": {},
//   "id_document_number": "95727385M",
//   "fake_id_document_type": 1,
//   "first_name": "Jose Filogonio",
//   "surname": "Juez"
//}
message FakeBasePerson {
  FakeBaseEntity fake_base_entity = 1;
  string id_document_number = 2; /* _Required_. _Unique_ along with fake\_id\_document\_type. Validation: _^[a-zA-Z0-9]{1,16}$_. <p>The identification number of the document of the fake person, which allows you to identify a given document and verify its authenticity.</p> */
  FakeIDDocumentType fake_id_document_type = 3; /* _Required_. _Unique_ along with id\_document\_number. <p>The type of the identification number of the fake person.</p> */
  string first_name = 4; /* _Required_. Validation: _^[a-zA-Z0-9]{1,32}$_. <p>The first name of the fake person.</p> */
  string surname = 5; /* _Required_. Validation: _^[a-zA-Z0-9]{1,32}$_. <p>The family name of the fake person.</p> */
  google.protobuf.StringValue second_surname = 6; /* _Optional_. Default: _none_. Validation: _^[a-zA-Z0-9]{1,32}$_. <p>The second surname of the fake person, which usually comes from its mother.</p> */
}

// Fake Base Person describe, with basic properties, the fake students, teachers, administrative and services staff and other non-University members.
message FakeStudent {
  FakeBasePerson fake_base_person = 1; // Basic properties of any fake person.
  google.protobuf.StringValue username = 2; /* _Optional_. Default: _none_. _Unique_. Validation: _^[a-zA-Z0-9.]{1,50}$_. <p>The name used by The University for identifying its members.</p> */
}

// List of fake base centers
message FakeBaseCenters {
    repeated FakeBaseCenter fakeBaseCenters = 1;
}

// List of fake students
message FakeStudents {
    repeated FakeStudent fakeStudents = 1;
}

// It allows you to specify the unique internal identifier from which the fake student will be retrieved.
// [Example]{"id": "10001"}
message GetFakeStudentByIDRequest {
  string id = 1; /* _Required_. Validation: _^[a-zA-Z0-9.-]{1,50}$_. <p>Unique internal identifier for the fake student.</p> */
}

// It allows you to specify the unique identification number and its type from which the fake student will be retrieved.
// [Example]{"id_document_number": "95727385M", "fake_id_document_type": 1 }
message GetFakeStudentByIDDocumentRequest {
  string id_document_number = 1; /* _Required_. Validation: _^[a-zA-Z0-9]{1,16}$_. <p>The identification number of the document of the fake person, which allows you to identify a given document and verify its authenticity.</p> */
  FakeIDDocumentType fake_id_document_type = 2; /* _Required_. <p>The type of the identification number of the fake person.</p> */
}

// It allows you to specify the unique internal identifier from which the fake student will be removed.
// [Example]{"id": "10001"}
message DeleteFakeStudentByIDRequest {
  string id = 1; /* _Required_. Validation: _^[a-zA-Z0-9.-]{1,50}$_. <p>Unique internal identifier for the fake student.</p> */
}

// Creating a new fake student will return its unique internal identifier auto-generated by the api.
message CreateFakeStudentResponse {
  string id = 1; /* _Required_. Validation: _^[a-zA-Z0-9.-]{1,50}$_. <p>Unique internal identifier for the fake student.</p> */
}

// Creating or updating the new fake student will return its unique internal identifier auto-generated by the api.
message UpsertFakeStudentResponse {
  string id = 1; /* _Required_. Validation: _^[a-zA-Z0-9.-]{1,50}$_. <p>Unique internal identifier for the fake student.</p> */
}
